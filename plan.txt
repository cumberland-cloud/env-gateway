data.aws_route53_zone.domain: Reading...
module.iam.data.aws_iam_policy_document.logs: Reading...
data.aws_region.current: Reading...
data.aws_acm_certificate.domain: Reading...
module.iam.data.aws_iam_policy_document.logs: Read complete after 0s [id=2625213186]
module.kms.data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Reading...
data.aws_region.current: Read complete after 0s [id=us-east-1]
module.iam.data.aws_iam_policy_document.service_assume_role["api_gateway"]: Reading...
module.iam.data.aws_iam_policy_document.service_assume_role["s3_replication"]: Reading...
module.iam.data.aws_iam_policy_document.service_assume_role["api_gateway"]: Read complete after 0s [id=1523744984]
module.iam.data.aws_iam_policy_document.service_assume_role["lambda"]: Reading...
module.iam.data.aws_iam_policy_document.service_assume_role["s3_replication"]: Read complete after 0s [id=1011553458]
module.iam.data.aws_iam_policy_document.service_assume_role["lambda"]: Read complete after 0s [id=3897740704]
data.aws_caller_identity.current: Read complete after 0s [id=632871124500]
data.aws_iam_policy_document.ecr_access["post_sale"]: Reading...
data.aws_iam_policy_document.ecr_access["authorize"]: Reading...
data.aws_iam_policy_document.ecr_access["get_inventory"]: Reading...
data.aws_iam_policy_document.ecr_access["get_sale"]: Reading...
data.aws_iam_policy_document.ecr_access["post_inventory"]: Reading...
data.aws_iam_policy_document.ecr_access["register"]: Reading...
data.aws_iam_policy_document.ecr_access["post_inventory"]: Read complete after 0s [id=4167399314]
data.aws_iam_policy_document.ecr_access["authorize"]: Read complete after 0s [id=28018240]
data.aws_iam_policy_document.ecr_access["post_sale"]: Read complete after 0s [id=2381422218]
data.aws_iam_policy_document.ecr_access["get_sale"]: Read complete after 0s [id=1022302484]
data.aws_iam_policy_document.ecr_access["register"]: Read complete after 0s [id=2994106812]
data.aws_iam_policy_document.ecr_access["get_inventory"]: Read complete after 0s [id=4030680953]
data.aws_iam_policy_document.ecr_access["token"]: Reading...
data.aws_iam_policy_document.ecr_access["token"]: Read complete after 0s [id=341925237]
module.kms.data.aws_caller_identity.current: Read complete after 0s [id=632871124500]
module.kms.data.aws_iam_policy_document.unmerged: Reading...
module.kms.data.aws_iam_policy_document.unmerged: Read complete after 0s [id=3486207887]
data.aws_acm_certificate.domain: Read complete after 0s [id=arn:aws:acm:us-east-1:632871124500:certificate/2b593539-9815-4724-97f5-0b1f26a6ad24]
data.aws_route53_zone.domain: Read complete after 1s [id=Z09025563SWSG46O6JCGO]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_api_gateway_account.this will be created
  + resource "aws_api_gateway_account" "this" {
      + cloudwatch_role_arn = (known after apply)
      + id                  = (known after apply)
      + throttle_settings   = (known after apply)
    }

  # aws_api_gateway_authorizer.this will be created
  + resource "aws_api_gateway_authorizer" "this" {
      + arn                              = (known after apply)
      + authorizer_result_ttl_in_seconds = 300
      + authorizer_uri                   = "arn:aws:lambda:us-east-1:632871124500:function:/cumberland-cloud/system/auth/authorize:*"
      + id                               = (known after apply)
      + identity_source                  = "method.request.header.authorization"
      + name                             = "cumberland-cloud-api-authorizer"
      + rest_api_id                      = (known after apply)
      + type                             = "TOKEN"
    }

  # aws_api_gateway_base_path_mapping.this will be created
  + resource "aws_api_gateway_base_path_mapping" "this" {
      + api_id      = (known after apply)
      + domain_name = "api.cumberland-cloud.com"
      + id          = (known after apply)
      + stage_name  = "production"
    }

  # aws_api_gateway_client_certificate.this will be created
  + resource "aws_api_gateway_client_certificate" "this" {
      + arn                     = (known after apply)
      + created_date            = (known after apply)
      + description             = "Cumberland Cloud client certificate"
      + expiration_date         = (known after apply)
      + id                      = (known after apply)
      + pem_encoded_certificate = (known after apply)
      + tags_all                = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # aws_api_gateway_deployment.this will be created
  + resource "aws_api_gateway_deployment" "this" {
      + created_date  = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
      + triggers      = {
          + "redeployment" = "2be88ca4242c76e8253ac62474851065032d6833"
        }
    }

  # aws_api_gateway_domain_name.this will be created
  + resource "aws_api_gateway_domain_name" "this" {
      + arn                                    = (known after apply)
      + certificate_arn                        = "arn:aws:acm:us-east-1:632871124500:certificate/2b593539-9815-4724-97f5-0b1f26a6ad24"
      + certificate_upload_date                = (known after apply)
      + cloudfront_domain_name                 = (known after apply)
      + cloudfront_zone_id                     = (known after apply)
      + domain_name                            = "api.cumberland-cloud.com"
      + id                                     = (known after apply)
      + ownership_verification_certificate_arn = (known after apply)
      + regional_domain_name                   = (known after apply)
      + regional_zone_id                       = (known after apply)
      + security_policy                        = "TLS_1_2"
      + tags_all                               = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.cors["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_integration" "cors" {
      + cache_namespace      = (known after apply)
      + connection_type      = "INTERNET"
      + http_method          = "OPTIONS"
      + id                   = (known after apply)
      + passthrough_behavior = "WHEN_NO_MATCH"
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
      + timeout_milliseconds = 29000
      + type                 = "MOCK"
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration.endpoints["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_integration" "endpoints" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_integration_response.cors["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_integration_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          + "method.response.header.Access-Control-Allow-Methods" = "'*'"
          + "method.response.header.Access-Control-Allow-Origin"  = "'*'"
        }
      + response_templates  = {
          + "application/json" = jsonencode(
                {
                  + status_code = 200
                }
            )
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method.cors["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.cors["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_method" "cors" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "OPTIONS"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "GET"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = "NONE"
      + http_method          = "POST"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = "NONE"
      + http_method          = "POST"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = "NONE"
      + http_method          = "GET"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "GET"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "POST"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "POST"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = "NONE"
      + http_method          = "GET"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "GET"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "POST"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method.endpoints["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_method" "endpoints" {
      + api_key_required     = false
      + authorization        = (known after apply)
      + http_method          = "POST"
      + id                   = (known after apply)
      + request_models       = (known after apply)
      + request_validator_id = (known after apply)
      + resource_id          = (known after apply)
      + rest_api_id          = (known after apply)
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_response.cors["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_method_response" "cors" {
      + http_method         = "OPTIONS"
      + id                  = (known after apply)
      + resource_id         = (known after apply)
      + response_models     = {
          + "application/json" = "Empty"
        }
      + response_parameters = {
          + "method.response.header.Access-Control-Allow-Headers" = false
          + "method.response.header.Access-Control-Allow-Methods" = false
          + "method.response.header.Access-Control-Allow-Origin"  = false
        }
      + rest_api_id         = (known after apply)
      + status_code         = "200"
    }

  # aws_api_gateway_method_settings.this will be created
  + resource "aws_api_gateway_method_settings" "this" {
      + id          = (known after apply)
      + method_path = "*/*"
      + rest_api_id = (known after apply)
      + stage_name  = "production"

      + settings {
          + cache_data_encrypted                       = true
          + cache_ttl_in_seconds                       = 300
          + caching_enabled                            = true
          + data_trace_enabled                         = (known after apply)
          + logging_level                              = "INFO"
          + metrics_enabled                            = true
          + require_authorization_for_cache_control    = (known after apply)
          + throttling_burst_limit                     = -1
          + throttling_rate_limit                      = -1
          + unauthorized_cache_control_header_strategy = (known after apply)
        }
    }

  # aws_api_gateway_model.endpoints["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_model" "endpoints" {
      + content_type = "application/json"
      + description  = "a JSON schema for register endpoints"
      + id           = (known after apply)
      + name         = "register-model"
      + rest_api_id  = (known after apply)
      + schema       = jsonencode(
            {
              + properties = {
                  + email      = {
                      + type = "string"
                    }
                  + first_name = {
                      + type = "string"
                    }
                  + last_name  = {
                      + type = "string"
                    }
                  + password   = {
                      + type = "string"
                    }
                  + username   = {
                      + type = "string"
                    }
                }
              + required   = [
                  + "tenant_id",
                  + "inventory_id",
                  + "quantity",
                ]
              + type       = "object"
            }
        )
    }

  # aws_api_gateway_model.endpoints["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_model" "endpoints" {
      + content_type = "application/json"
      + description  = "a JSON schema for token endpoints"
      + id           = (known after apply)
      + name         = "token-model"
      + rest_api_id  = (known after apply)
      + schema       = jsonencode(
            {
              + properties = {
                  + password = {
                      + type = "string"
                    }
                  + username = {
                      + type = "string"
                    }
                }
              + required   = [
                  + "tenant_id",
                  + "inventory_id",
                  + "quantity",
                ]
              + type       = "object"
            }
        )
    }

  # aws_api_gateway_model.endpoints["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_model" "endpoints" {
      + content_type = "application/json"
      + description  = "a JSON schema for post-inventory endpoints"
      + id           = (known after apply)
      + name         = "post-inventory-model"
      + rest_api_id  = (known after apply)
      + schema       = jsonencode(
            {
              + properties = {
                  + description  = {
                      + type = "string"
                    }
                  + image_path   = {
                      + type = "string"
                    }
                  + inventory_id = {
                      + type = "integer"
                    }
                  + quantity     = {
                      + type = "integer"
                    }
                  + tenant_id    = {
                      + type = "string"
                    }
                }
              + required   = [
                  + "tenant_id",
                  + "inventory_id",
                  + "quantity",
                ]
              + type       = "object"
            }
        )
    }

  # aws_api_gateway_model.endpoints["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_model" "endpoints" {
      + content_type = "application/json"
      + description  = "a JSON schema for post-sale endpoints"
      + id           = (known after apply)
      + name         = "post-sale-model"
      + rest_api_id  = (known after apply)
      + schema       = jsonencode(
            {
              + properties = {
                  + inventory_id = {
                      + type = "integer"
                    }
                  + quantity     = {
                      + type = "integer"
                    }
                  + tenant_id    = {
                      + type = "string"
                    }
                }
              + required   = [
                  + "tenant_id",
                  + "inventory_id",
                  + "quantity",
                ]
              + type       = "object"
            }
        )
    }

  # aws_api_gateway_model.endpoints["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_model" "endpoints" {
      + content_type = "application/json"
      + description  = "a JSON schema for post-inventory endpoints"
      + id           = (known after apply)
      + name         = "post-inventory-model"
      + rest_api_id  = (known after apply)
      + schema       = jsonencode(
            {
              + properties = {
                  + description  = {
                      + type = "string"
                    }
                  + image_path   = {
                      + type = "string"
                    }
                  + inventory_id = {
                      + type = "integer"
                    }
                  + quantity     = {
                      + type = "integer"
                    }
                  + tenant_id    = {
                      + type = "string"
                    }
                }
              + required   = [
                  + "tenant_id",
                  + "inventory_id",
                  + "quantity",
                ]
              + type       = "object"
            }
        )
    }

  # aws_api_gateway_model.endpoints["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_model" "endpoints" {
      + content_type = "application/json"
      + description  = "a JSON schema for post-sale endpoints"
      + id           = (known after apply)
      + name         = "post-sale-model"
      + rest_api_id  = (known after apply)
      + schema       = jsonencode(
            {
              + properties = {
                  + inventory_id = {
                      + type = "integer"
                    }
                  + quantity     = {
                      + type = "integer"
                    }
                  + tenant_id    = {
                      + type = "string"
                    }
                }
              + required   = [
                  + "tenant_id",
                  + "inventory_id",
                  + "quantity",
                ]
              + type       = "object"
            }
        )
    }

  # aws_api_gateway_request_validator.this will be created
  + resource "aws_api_gateway_request_validator" "this" {
      + id                          = (known after apply)
      + name                        = "cumberland-cloud-request-validator"
      + rest_api_id                 = (known after apply)
      + validate_request_body       = true
      + validate_request_parameters = true
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "auth"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "auth"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "auth"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "cafe_mark"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "cafe_mark"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "cafe_mark"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "cafe_mark"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "sunshine_daze"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "sunshine_daze"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "sunshine_daze"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.endpoints["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_api_gateway_resource" "endpoints" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "sunshine_daze"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.namespaces["system"] will be created
  + resource "aws_api_gateway_resource" "namespaces" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "system"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.namespaces["tenant"] will be created
  + resource "aws_api_gateway_resource" "namespaces" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "tenant"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.root will be created
  + resource "aws_api_gateway_resource" "root" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "gateway"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.subspaces["auth"] will be created
  + resource "aws_api_gateway_resource" "subspaces" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "auth"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.subspaces["cafe_mark"] will be created
  + resource "aws_api_gateway_resource" "subspaces" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "cafe-mark"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_resource.subspaces["sunshine_daze"] will be created
  + resource "aws_api_gateway_resource" "subspaces" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "sunshine-daze"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_rest_api.this will be created
  + resource "aws_api_gateway_rest_api" "this" {
      + api_key_source               = (known after apply)
      + arn                          = (known after apply)
      + binary_media_types           = (known after apply)
      + created_date                 = (known after apply)
      + description                  = (known after apply)
      + disable_execute_api_endpoint = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + minimum_compression_size     = (known after apply)
      + name                         = "cumberland-cloud-api-gateway"
      + policy                       = (known after apply)
      + root_resource_id             = (known after apply)
      + tags_all                     = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # aws_api_gateway_stage.this will be created
  + resource "aws_api_gateway_stage" "this" {
      + arn                   = (known after apply)
      + cache_cluster_enabled = true
      + cache_cluster_size    = "13.5"
      + client_certificate_id = (known after apply)
      + deployment_id         = (known after apply)
      + execution_arn         = (known after apply)
      + id                    = (known after apply)
      + invoke_url            = (known after apply)
      + rest_api_id           = (known after apply)
      + stage_name            = "production"
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + web_acl_arn           = (known after apply)
      + xray_tracing_enabled  = true

      + access_log_settings {
          + destination_arn = (known after apply)
          + format          = "json"
        }
    }

  # aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/apigateway/cumberland-cloud-api-gateway"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.system.auth.authorize"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_system_auth_authorize"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.system.auth.register"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_system_auth_register"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.system.auth.token"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_system_auth_token"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.cafe_mark.get-inventory"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_cafe-mark_get-inventory"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.cafe_mark.get-sale"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_cafe-mark_get-sale"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.cafe_mark.post-inventory"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_cafe-mark_post-inventory"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.cafe_mark.post-sale"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_cafe-mark_post-sale"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.sunshine_daze.get-inventory"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_sunshine-daze_get-inventory"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.sunshine_daze.get-sale"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_sunshine-daze_get-sale"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.sunshine_daze.post-inventory"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_sunshine-daze_post-inventory"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_lambda_permission.endpoints["cumberland-cloud.tenant.sunshine_daze.post-sale"] will be created
  + resource "aws_lambda_permission" "endpoints" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "cumberland-cloud_tenant_sunshine-daze_post-sale"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "APIGatewayLambdaInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_route53_record.this will be created
  + resource "aws_route53_record" "this" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = "api.cumberland-cloud.com"
      + type            = "A"
      + zone_id         = "Z09025563SWSG46O6JCGO"

      + alias {
          + evaluate_target_health = true
          + name                   = (known after apply)
          + zone_id                = (known after apply)
        }
    }

  # aws_signer_signing_profile.this will be created
  + resource "aws_signer_signing_profile" "this" {
      + arn                   = (known after apply)
      + id                    = (known after apply)
      + name                  = (known after apply)
      + name_prefix           = "CumberlandCloudSigner"
      + platform_display_name = (known after apply)
      + platform_id           = "AWSLambda-SHA384-ECDSA"
      + revocation_record     = (known after apply)
      + status                = (known after apply)
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + version               = (known after apply)
      + version_arn           = (known after apply)

      + signature_validity_period {
          + type  = "YEARS"
          + value = 5
        }
    }

  # module.cognito.data.aws_iam_policy_document.tenant_assume_role will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "tenant_assume_role" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRole",
            ]
          + effect  = "Allow"
          + sid     = "TenantTrustRelationship"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + (known after apply),
                ]
              + variable = "cognito-identity.amazonaws.com:aud"
            }
        }
    }

  # module.cognito.aws_cognito_user_group.this["tenant_admin"] will be created
  + resource "aws_cognito_user_group" "this" {
      + description  = "Cumberland Cloud Tenant Admin Access Group"
      + id           = (known after apply)
      + name         = "cumberland-cloud-tenant-admin"
      + role_arn     = (known after apply)
      + user_pool_id = (known after apply)
    }

  # module.cognito.aws_cognito_user_group.this["tenant_user"] will be created
  + resource "aws_cognito_user_group" "this" {
      + description  = "Cumberland Cloud Tenant User Access Group"
      + id           = (known after apply)
      + name         = "cumberland-cloud-tenant-user"
      + role_arn     = (known after apply)
      + user_pool_id = (known after apply)
    }

  # module.cognito.aws_cognito_user_pool.this will be created
  + resource "aws_cognito_user_pool" "this" {
      + arn                        = (known after apply)
      + creation_date              = (known after apply)
      + custom_domain              = (known after apply)
      + deletion_protection        = "INACTIVE"
      + domain                     = (known after apply)
      + email_verification_message = (known after apply)
      + email_verification_subject = (known after apply)
      + endpoint                   = (known after apply)
      + estimated_number_of_users  = (known after apply)
      + id                         = (known after apply)
      + last_modified_date         = (known after apply)
      + mfa_configuration          = "OFF"
      + name                       = "cumberland-cloud"
      + sms_verification_message   = (known after apply)
      + tags_all                   = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + admin_create_user_config {
          + allow_admin_create_user_only = true
        }

      + password_policy {
          + minimum_length                   = 12
          + require_lowercase                = true
          + require_symbols                  = true
          + require_uppercase                = true
          + temporary_password_validity_days = 3
        }

      + schema {
          + attribute_data_type      = "String"
          + developer_only_attribute = false
          + mutable                  = true
          + name                     = "email"
          + required                 = true
        }
      + schema {
          + attribute_data_type      = "String"
          + developer_only_attribute = false
          + mutable                  = true
          + name                     = "username"
          + required                 = true
        }

      + username_configuration {
          + case_sensitive = true
        }
    }

  # module.cognito.aws_cognito_user_pool_client.this will be created
  + resource "aws_cognito_user_pool_client" "this" {
      + access_token_validity                         = 60
      + allowed_oauth_flows                           = [
          + "implicit",
        ]
      + allowed_oauth_flows_user_pool_client          = true
      + allowed_oauth_scopes                          = [
          + "email",
          + "openid",
          + "profile",
        ]
      + auth_session_validity                         = (known after apply)
      + callback_urls                                 = [
          + "http://cumberland-cloud.com",
        ]
      + client_secret                                 = (sensitive value)
      + default_redirect_uri                          = (known after apply)
      + enable_propagate_additional_user_context_data = (known after apply)
      + enable_token_revocation                       = (known after apply)
      + explicit_auth_flows                           = [
          + "ALLOW_CUSTOM_AUTH",
          + "ALLOW_REFRESH_TOKEN_AUTH",
          + "ALLOW_USER_PASSWORD_AUTH",
          + "ALLOW_USER_SRP_AUTH",
        ]
      + id                                            = (known after apply)
      + id_token_validity                             = 60
      + logout_urls                                   = (known after apply)
      + name                                          = "cumberland-cloud-client"
      + prevent_user_existence_errors                 = (known after apply)
      + read_attributes                               = (known after apply)
      + refresh_token_validity                        = 30
      + supported_identity_providers                  = [
          + "COGNITO",
        ]
      + user_pool_id                                  = (known after apply)
      + write_attributes                              = (known after apply)

      + token_validity_units {
          + access_token  = "minutes"
          + id_token      = "minutes"
          + refresh_token = "days"
        }
    }

  # module.cognito.aws_iam_role.tenant_roles["tenant_admin"] will be created
  + resource "aws_iam_role" "tenant_roles" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cumberland-cloud-tenant-admin"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + unique_id             = (known after apply)
    }

  # module.cognito.aws_iam_role.tenant_roles["tenant_user"] will be created
  + resource "aws_iam_role" "tenant_roles" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cumberland-cloud-tenant-user"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + unique_id             = (known after apply)
    }

  # module.ecr["authorize"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["authorize"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_system_auth_authorize:*"
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["authorize"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["authorize"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/system/auth/authorize"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["authorize"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/system/auth/authorize"
    }

  # module.ecr["get_inventory"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["get_inventory"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = [
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_cafe-mark_get-inventory:*",
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_sunshine-daze_get-inventory:*",
                                    ]
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["get_inventory"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["get_inventory"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/tenant/get-inventory"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["get_inventory"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/tenant/get-inventory"
    }

  # module.ecr["get_sale"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["get_sale"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = [
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_cafe-mark_get-sale:*",
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_sunshine-daze_get-sale:*",
                                    ]
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["get_sale"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["get_sale"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/tenant/get-sale"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["get_sale"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/tenant/get-sale"
    }

  # module.ecr["post_inventory"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["post_inventory"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = [
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_cafe-mark_post-inventory:*",
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_sunshine-daze_post-inventory:*",
                                    ]
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["post_inventory"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["post_inventory"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/tenant/post-inventory"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["post_inventory"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/tenant/post-inventory"
    }

  # module.ecr["post_sale"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["post_sale"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = [
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_cafe-mark_post-sale:*",
                                      + "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_tenant_sunshine-daze_post-sale:*",
                                    ]
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["post_sale"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["post_sale"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/tenant/post-sale"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["post_sale"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/tenant/post-sale"
    }

  # module.ecr["register"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["register"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_system_auth_register:*"
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["register"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["register"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/system/auth/register"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["register"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/system/auth/register"
    }

  # module.ecr["token"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.ecr["token"].data.aws_iam_policy_document.merged[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "merged" {
      + id                      = (known after apply)
      + json                    = (known after apply)
      + source_policy_documents = [
          + (known after apply),
          + jsonencode(
                {
                  + Statement = [
                      + {
                          + Action    = [
                              + "ecr:GetDownloadUrlForLayer",
                              + "ecr:BatchGetImage",
                            ]
                          + Condition = {
                              + ArnLike = {
                                  + "aws:SourceArn" = "arn:aws:lambda:us-east-1:632871124500:function:cumberland-cloud_system_auth_token:*"
                                }
                            }
                          + Effect    = "Allow"
                          + Principal = {
                              + Service = "lambda.amazonaws.com"
                            }
                          + Sid       = "EnableLambdaAccess"
                        },
                    ]
                  + Version   = "2012-10-17"
                }
            ),
        ]
    }

  # module.ecr["token"].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "ecr:GetAuthorizationToken",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAuth"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "ecr:BatchCheckLayerAvailability",
              + "ecr:BatchGetImage",
              + "ecr:CompleteLayerUpload",
              + "ecr:Describe*",
              + "ecr:Get*",
              + "ecr:InitiateLayerUpload",
              + "ecr:List*",
              + "ecr:PutImage",
              + "ecr:UploadLayerPart",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnableAccess"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.ecr["token"].aws_ecr_repository.this will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "cumberland-cloud/system/auth/token"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr["token"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = (known after apply)
      + registry_id = (known after apply)
      + repository  = "cumberland-cloud/system/auth/token"
    }

  # module.iam.aws_iam_policy.this["logs"] will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows principal to publish to CloudWatch log groups"
      + id          = (known after apply)
      + name        = "cumberland-cloud-cloudwatch-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:PutLogEvents",
                          + "logs:CreateLogStream",
                          + "logs:CreateLogGroup",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:*:*:*"
                      + Sid      = "LogPerms"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.iam.aws_iam_role.service_roles["api_gateway"] will be created
  + resource "aws_iam_role" "service_roles" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "apigateway.amazonaws.com"
                        }
                      + Sid       = "ServiceTrustRelationship"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "api-gateway-executor"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + unique_id             = (known after apply)
    }

  # module.iam.aws_iam_role.service_roles["lambda"] will be created
  + resource "aws_iam_role" "service_roles" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = "ServiceTrustRelationship"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "lambda-executor"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + unique_id             = (known after apply)
    }

  # module.iam.aws_iam_role.service_roles["s3_replication"] will be created
  + resource "aws_iam_role" "service_roles" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = "ServiceTrustRelationship"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "s3-replicator"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + unique_id             = (known after apply)
    }

  # module.iam.aws_iam_role_policy_attachment.service_role_attachments["0"] will be created
  + resource "aws_iam_role_policy_attachment" "service_role_attachments" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      + role       = "api-gateway-executor"
    }

  # module.iam.aws_iam_role_policy_attachment.service_role_attachments["1"] will be created
  + resource "aws_iam_role_policy_attachment" "service_role_attachments" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.kms.aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/cumberland-cloud"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.kms.aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "kms:Update*",
                          + "kms:UntagResource",
                          + "kms:TagResource",
                          + "kms:ScheduleKeyDeletion",
                          + "kms:Revoke*",
                          + "kms:Put*",
                          + "kms:List*",
                          + "kms:Get*",
                          + "kms:Enable*",
                          + "kms:Disable*",
                          + "kms:Describe*",
                          + "kms:Delete*",
                          + "kms:Create*",
                          + "kms:CancelKeyDeletion",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::632871124500:user/admin"
                        }
                      + Resource  = "*"
                      + Sid       = "EnableAdminPerms"
                    },
                  + {
                      + Action    = [
                          + "kms:ReEncrypt*",
                          + "kms:GenerateDataKey*",
                          + "kms:Encrypt",
                          + "kms:DescribeKey",
                          + "kms:Decrypt",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::632871124500:root"
                        }
                      + Resource  = "*"
                      + Sid       = "EnableIAMPerms"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:system_auth_authorize-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:system_auth_authorize-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_system_auth_authorize"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'system_auth_authorize-notifications'"
      + id          = (known after apply)
      + name        = "system_auth_authorize-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_system_auth_authorize"
      + id                             = (known after apply)
      + image_uri                      = "authorize"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "system_auth_authorize-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.register"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.register"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:system_auth_register-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:system_auth_register-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.register"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_system_auth_register"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'system_auth_register-notifications'"
      + id          = (known after apply)
      + name        = "system_auth_register-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.system.auth.register"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_system_auth_register"
      + id                             = (known after apply)
      + image_uri                      = "register"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "system_auth_register-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.token"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.token"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:system_auth_token-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:system_auth_token-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.token"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_system_auth_token"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'system_auth_token-notifications'"
      + id          = (known after apply)
      + name        = "system_auth_token-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.system.auth.token"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_system_auth_token"
      + id                             = (known after apply)
      + image_uri                      = "token"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "system_auth_token-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_get-inventory-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_get-inventory-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_cafe-mark_get-inventory"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_cafe-mark_get-inventory-notifications'"
      + id          = (known after apply)
      + name        = "tenant_cafe-mark_get-inventory-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_cafe-mark_get-inventory"
      + id                             = (known after apply)
      + image_uri                      = "get-inventory"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "cafe-mark"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_cafe-mark_get-inventory-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_get-sale-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_get-sale-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_cafe-mark_get-sale"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_cafe-mark_get-sale-notifications'"
      + id          = (known after apply)
      + name        = "tenant_cafe-mark_get-sale-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_cafe-mark_get-sale"
      + id                             = (known after apply)
      + image_uri                      = "get-sale"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "cafe-mark"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_cafe-mark_get-sale-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_post-inventory-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_post-inventory-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_cafe-mark_post-inventory"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_cafe-mark_post-inventory-notifications'"
      + id          = (known after apply)
      + name        = "tenant_cafe-mark_post-inventory-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_cafe-mark_post-inventory"
      + id                             = (known after apply)
      + image_uri                      = "post-inventory"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "cafe-mark"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_cafe-mark_post-inventory-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_post-sale-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_cafe-mark_post-sale-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_cafe-mark_post-sale"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_cafe-mark_post-sale-notifications'"
      + id          = (known after apply)
      + name        = "tenant_cafe-mark_post-sale-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_cafe-mark_post-sale"
      + id                             = (known after apply)
      + image_uri                      = "post-sale"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "cafe-mark"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_cafe-mark_post-sale-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_get-inventory-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_get-inventory-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_sunshine-daze_get-inventory"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_sunshine-daze_get-inventory-notifications'"
      + id          = (known after apply)
      + name        = "tenant_sunshine-daze_get-inventory-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_sunshine-daze_get-inventory"
      + id                             = (known after apply)
      + image_uri                      = "get-inventory"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "sunshine-daze"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_sunshine-daze_get-inventory-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_get-sale-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_get-sale-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_sunshine-daze_get-sale"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_sunshine-daze_get-sale-notifications'"
      + id          = (known after apply)
      + name        = "tenant_sunshine-daze_get-sale-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_sunshine-daze_get-sale"
      + id                             = (known after apply)
      + image_uri                      = "get-sale"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "sunshine-daze"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_sunshine-daze_get-sale-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_post-inventory-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_post-inventory-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_sunshine-daze_post-inventory"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_sunshine-daze_post-inventory-notifications'"
      + id          = (known after apply)
      + name        = "tenant_sunshine-daze_post-inventory-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_sunshine-daze_post-inventory"
      + id                             = (known after apply)
      + image_uri                      = "post-inventory"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "sunshine-daze"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_sunshine-daze_post-inventory-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].data.aws_iam_policy_document.notification_identity_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_identity_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_post-sale-notifications",
            ]

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].data.aws_iam_policy_document.notification_resource_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "notification_resource_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "sns:Publish",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:sns:*:*:tenant_sunshine-daze_post-sale-notifications",
            ]
          + sid       = "LambdaServicePerms"

          + condition {
              + test     = "ArnLike"
              + values   = [
                  + (known after apply),
                ]
              + variable = "aws:SourceArn"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "*"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].aws_cloudwatch_log_group.this will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + kms_key_id        = (known after apply)
      + name              = "/aws/lambda/cumberland-cloud_tenant_sunshine-daze_post-sale"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].aws_iam_policy.this will be created
  + resource "aws_iam_policy" "this" {
      + arn         = (known after apply)
      + description = "Allows publishing to the SNS Topic 'tenant_sunshine-daze_post-sale-notifications'"
      + id          = (known after apply)
      + name        = "tenant_sunshine-daze_post-sale-sns-dlq-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].aws_iam_role_policy_attachment.this will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda-executor"
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + function_name                  = "cumberland-cloud_tenant_sunshine-daze_post-sale"
      + id                             = (known after apply)
      + image_uri                      = "post-sale"
      + invoke_arn                     = (known after apply)
      + kms_key_arn                    = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Image"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 50
      + role                           = (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + timeout                        = 120
      + version                        = (known after apply)

      + dead_letter_config {
          + target_arn = (known after apply)
        }

      + environment {
          + variables = {
              + "TENANT" = "sunshine-daze"
            }
        }

      + tracing_config {
          + mode = "Active"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].aws_sns_topic.this will be created
  + resource "aws_sns_topic" "this" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + kms_master_key_id           = (known after apply)
      + name                        = "tenant_sunshine-daze_post-sale-notifications"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
      + tracing_config              = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/system_auth_authorize-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.authorize"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.register"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.register"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/system_auth_register-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.register"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.token"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.system.auth.token"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/system_auth_token-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.system.auth.token"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_cafe-mark_get-inventory-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-inventory"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_cafe-mark_get-sale-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.get-sale"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_cafe-mark_post-inventory-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-inventory"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_cafe-mark_post-sale-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.cafe_mark.post-sale"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_sunshine-daze_get-inventory-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-inventory"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_sunshine-daze_get-sale-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.get-sale"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_sunshine-daze_post-inventory-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-inventory"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].module.kms[0].data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].module.kms[0].data.aws_iam_policy_document.unmerged will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "unmerged" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "kms:CancelKeyDeletion",
              + "kms:Create*",
              + "kms:Delete*",
              + "kms:Describe*",
              + "kms:Disable*",
              + "kms:Enable*",
              + "kms:Get*",
              + "kms:List*",
              + "kms:Put*",
              + "kms:Revoke*",
              + "kms:ScheduleKeyDeletion",
              + "kms:TagResource",
              + "kms:UntagResource",
              + "kms:Update*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableAdminPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "kms:Decrypt",
              + "kms:DescribeKey",
              + "kms:Encrypt",
              + "kms:GenerateDataKey*",
              + "kms:ReEncrypt*",
            ]
          + effect    = "Allow"
          + resources = [
              + "*",
            ]
          + sid       = "EnableIAMPerms"

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "AWS"
            }
        }
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].module.kms[0].aws_kms_alias.this will be created
  + resource "aws_kms_alias" "this" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/tenant_sunshine-daze_post-sale-s3"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.lambda["cumberland-cloud.tenant.sunshine_daze.post-sale"].module.kms[0].aws_kms_key.this will be created
  + resource "aws_kms_key" "this" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = (known after apply)
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags_all                           = {
          + "Component"   = "Gateway"
          + "Contact"     = "chinchalinchin@gmail.com"
          + "Environment" = "Production"
          + "Maintainer"  = "Grant Moore"
          + "Owner"       = "Grant Moore"
          + "Project"     = "Cumberland Cloud"
        }
    }

Plan: 218 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
